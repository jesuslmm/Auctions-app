// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  creator       Auction[]      @relation("user")
  Bid           Bid[]
  Comment       Comment[]
  watchlist     Watchlist?
  Notification  Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Auction {
  id           String         @id @default(cuid())
  product      String
  description  String
  userId       String
  image        String
  finishTime   String
  bid          Bid?
  finished     Boolean        @default(false)
  category     CategoryType
  user         User           @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  Comment      Comment[]
  Watchlist    Watchlist?     @relation(fields: [watchlistId], references: [id])
  watchlistId  String?
  Notification Notification[]
}

model Bid {
  id         String  @id @default(cuid())
  actual_bid Int
  auction    Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId  String  @unique
  buyerId    String?
  user       User?   @relation(fields: [buyerId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String  @id @default(cuid())
  comment   String
  answer    String?
  productId String
  auction   Auction @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id           String  @id @default(cuid())
  notification String
  productName  String
  checked      Boolean @default(false)
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  auction      Auction @relation(fields: [auctionId], references: [id])
  auctionId    String
}

model Watchlist {
  id       String    @id @default(cuid())
  products Auction[]
  userId   String    @unique
  user     User      @relation(fields: [userId], references: [id])
}

enum CategoryType {
  Gaming
  Electronic
  Art
  Antiques
  Jewerly
  Sports
  Clothes
  Toys
  Books
}
